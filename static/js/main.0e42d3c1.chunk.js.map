{"version":3,"sources":["api.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PersonRowInfo.tsx","components/PeopleTable.tsx","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","pages/HomePage.tsx","components/PageNavLink.tsx","components/MainNav.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","className","PersonLink","person","to","slug","classNames","sex","name","PersonRowInfo","selectedSlug","died","born","mother","motherName","fatherName","father","PeopleTable","people","useParams","map","ErrorType","PeoplePage","useState","setPeople","isLoading","setIsLoading","NONE","errorMessage","setErrorMessage","useEffect","fetchPeople","fetchedPeople","peopleWithParents","copyPerson","find","length","NOPEOPLE","LOAD","isLoadError","areNotPeopleError","NotFoundPage","HomePage","PageNavLink","text","isActive","MainNav","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"mRASO,SAASA,IACd,OALYC,EAKA,IAJL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAKvBI,MAAK,kBAAMC,MARZ,oEAQM,IACLD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IAPlB,IAAcP,CAQb,C,iBCXYQ,EAAS,kBACpB,qBAAKC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,E,gBCMTC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,cAAC,IAAD,CACEC,GAAE,aAAQD,EAAOE,MACjBJ,UAAWK,IAAW,CACpB,kBAAkC,MAAfH,EAAOI,MAH9B,SAMGJ,EAAOK,MAP+B,ECC9BC,EAAiC,SAAC,GAA8B,IAA5BN,EAA2B,EAA3BA,OAAQO,EAAmB,EAAnBA,aAErDL,EACEF,EADFE,KAAME,EACJJ,EADII,IAAKI,EACTR,EADSQ,KAAMC,EACfT,EADeS,KAAMC,EACrBV,EADqBU,OAAQC,EAC7BX,EAD6BW,WAAYC,EACzCZ,EADyCY,WAAYC,EACrDb,EADqDa,OAGzD,OACE,qBACE,UAAQ,SACRf,UAAWK,IACT,CAAE,yBAA0BI,IAAiBL,IAHjD,UAME,6BACE,cAAC,EAAD,CAAYF,OAAQA,MAGtB,6BAAKI,IACL,6BAAKK,IACL,6BAAKD,IAEL,6BACGE,EACC,cAAC,EAAD,CAAYV,OAAQU,IAEpBC,GAAc,MAIlB,6BACGE,EACC,cAAC,EAAD,CAAYb,OAAQa,IAEpBD,GAAc,QAKvB,ECrCYE,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAE7C,EAAoCC,cAA5Bd,KAAMK,OAAd,MAA6B,GAA7B,EAEA,OACE,wBACE,UAAQ,cACRT,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACGiB,EAAOE,KAAI,SAAAjB,GAAM,OAChB,cAAC,EAAD,CACEA,OAAQA,EACRO,aAAcA,GACTP,EAAOE,KAJE,QAUzB,EClCWgB,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,QAAYA,EAAZ,4BAAYA,EAAZ,6CAAYA,CAAZ,MAMaC,EAAuB,WAClC,MAA4BC,mBAAmB,IAA/C,mBAAOL,EAAP,KAAeM,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,mBAAoBF,EAAUM,MAAtE,mBAAOC,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,IAAMC,EAAW,iDAAG,gHAEhBL,GAAa,GAFG,SAIYnC,IAJZ,UAIVyC,EAJU,OAqBiB,KAhB3BC,EAAoBD,EAAcZ,KAAI,SAAAjB,GAC1C,IAAM+B,EAAU,eAAQ/B,GAYxB,OAVIA,EAAOW,aACToB,EAAWrB,OACPmB,EAAcG,MAAK,SAAAtB,GAAM,OAAIA,EAAOL,OAASL,EAAOW,UAA3B,KAG3BX,EAAOY,aACTmB,EAAWlB,OACPgB,EAAcG,MAAK,SAAAnB,GAAM,OAAIA,EAAOR,OAASL,EAAOY,UAA3B,KAGxBmB,CACR,KAEqBE,OArBN,uBAsBdP,EAAgBR,EAAUgB,UAtBZ,0BA2BhBb,EAAUS,GACVJ,EAAgBR,EAAUM,MA5BV,kDA8BhBE,EAAgBR,EAAUiB,MA9BV,yBAgChBZ,GAAa,GAhCG,6EAAH,qDAoCjBK,GACD,GAAE,IAEH,IAAMQ,EAAcX,IAAiBP,EAAUiB,KACzCE,EAAoBZ,IAAiBP,EAAUgB,SAErD,OACE,sBAAKpC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,sBAAf,UACGsC,GACC,mBAAG,UAAQ,qBAAqBtC,UAAU,kBAA1C,SACG2B,IAIJY,GACC,mBAAG,UAAQ,kBAAX,SACGZ,IAIJH,EACC,cAAC,EAAD,KAECG,GAAgB,cAAC,EAAD,CAAaV,OAAQA,WAMjD,ECvFYuB,EAAyB,kBACpC,qBAAKxC,UAAU,YAAf,SACE,oBAAIA,UAAU,QAAd,6BAFkC,ECAzByC,EAAqB,kBAChC,qBAAKzC,UAAU,YAAf,SACE,oBAAIA,UAAU,QAAd,wBAF8B,ECQrB0C,EAA+B,SAAC,GAAD,IAAGvC,EAAH,EAAGA,GAAIwC,EAAP,EAAOA,KAAP,OAC1C,cAAC,IAAD,CACExC,GAAIA,EACJH,UAAW,gBAAG4C,EAAH,EAAGA,SAAH,OAAkBvC,IAC3B,cACA,CAAE,8BAA+BuC,GAFxB,EAFb,SAOGD,GARuC,ECN/BE,EAAoB,kBAC/B,qBACE,UAAQ,MACR7C,UAAU,iCACV8C,KAAK,aACL,aAAW,kBAJb,SAME,qBAAK9C,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAaG,GAAG,IAAIwC,KAAK,SAEzB,cAAC,EAAD,CAAaxC,GAAG,UAAUwC,KAAK,iBAXN,ECOpBI,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,sBAAM/C,UAAU,UAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgD,KAAK,IAAIC,QAAS,cAAC,EAAD,MAEzB,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAU9C,GAAG,IAAI+C,SAAO,MAEpD,eAAC,IAAD,CAAOF,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOG,OAAK,EAACF,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,gBAMxC,ECrBDG,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.0e42d3c1.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\nconst API_URL\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person;\n}\n\nexport const PersonLink: React.FC<Props> = ({ person }) => (\n  <Link\n    to={`../${person.slug}`}\n    className={classNames({\n      'has-text-danger': person.sex === 'f',\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ninterface Props {\n  person: Person;\n  selectedSlug: string;\n}\n\nexport const PersonRowInfo: React.FC<Props> = ({ person, selectedSlug }) => {\n  const {\n    slug, sex, died, born, mother, motherName, fatherName, father,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': selectedSlug === slug },\n      )}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || '-'\n        )}\n      </td>\n\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonRowInfo } from './PersonRowInfo';\n\ninterface Props {\n  people: Person[];\n  // selectedSlug: string,\n}\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  // const { people, selectedSlug } = props;\n  const { slug: selectedSlug = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonRowInfo\n            person={person}\n            selectedSlug={selectedSlug}\n            key={person.slug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { PeopleTable } from '../components/PeopleTable';\n\nexport enum ErrorType {\n  NONE = '',\n  LOAD = 'Something went wrong',\n  NOPEOPLE = 'There are no people on the server',\n}\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState<ErrorType>(ErrorType.NONE);\n\n  useEffect(() => {\n    const fetchPeople = async () => {\n      try {\n        setIsLoading(true);\n\n        const fetchedPeople = await getPeople();\n        const peopleWithParents = fetchedPeople.map(person => {\n          const copyPerson = { ...person };\n\n          if (person.motherName) {\n            copyPerson.mother\n              = fetchedPeople.find(mother => mother.name === person.motherName);\n          }\n\n          if (person.fatherName) {\n            copyPerson.father\n              = fetchedPeople.find(father => father.name === person.fatherName);\n          }\n\n          return copyPerson;\n        });\n\n        if (peopleWithParents.length === 0) {\n          setErrorMessage(ErrorType.NOPEOPLE);\n\n          return;\n        }\n\n        setPeople(peopleWithParents);\n        setErrorMessage(ErrorType.NONE);\n      } catch {\n        setErrorMessage(ErrorType.LOAD);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPeople();\n  }, []);\n\n  const isLoadError = errorMessage === ErrorType.LOAD;\n  const areNotPeopleError = errorMessage === ErrorType.NOPEOPLE;\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoadError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {areNotPeopleError && (\n            <p data-cy=\"noPeopleMessage\">\n              {errorMessage}\n            </p>\n          )}\n\n          {isLoading ? (\n            <Loader />\n          ) : (\n            !errorMessage && <PeopleTable people={people} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const NotFoundPage: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Page not found</h1>\n  </div>\n);\n","export const HomePage: React.FC = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">Home Page</h1>\n  </div>\n);\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ninterface Props {\n  to: string;\n  text: string;\n}\n\nexport const PageNavLink: React.FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    )}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from './PageNavLink';\n\nexport const MainNav: React.FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n\n        <PageNavLink to=\"/people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\n\nimport './App.scss';\n\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { HomePage } from './pages/HomePage';\nimport { MainNav } from './components/MainNav';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <MainNav />\n\n      <main className=\"section\">\n        <Routes>\n          <Route path=\"*\" element={<NotFoundPage />} />\n\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n        </Routes>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}